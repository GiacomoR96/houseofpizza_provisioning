---
- name: Configuration master
  hosts: all
  gather_facts: false
  become: yes
  
  tasks:
    - include_vars: config_vars.yml

    - debug: msg="Init configuration for master node"

    - debug: msg="Master config - IP, {{ master }}"

    - debug: msg="Master config - kubeadm_token, {{ kubeadm_token }}"

    - debug: msg="Master config - ip_address, {{ ip_address }}"

    - debug: msg="Master config - cluster_name, {{ cluster_name }}"

    - debug: msg="Master config - aws_region, {{ aws_region }}"

    - debug: msg="Master config - aws_subnets, {{ aws_subnets }}"

    - debug: msg="Master config - aws_subnets, {{ aws_access_key }}"

    - debug: msg="Master config - aws_subnets, {{ aws_secret_access_key }}"

    - name: Creates directory aws credential
      ansible.builtin.file:
        path: /home/ubuntu/.aws
        state: directory
  
    - name: Add aws_access_key file
      copy:
        dest: "/home/ubuntu/.aws/aws_access_key"
        content: |
          {{ aws_access_key }}
  
    - name: Add aws_secret_access_key file
      copy:
        dest: "/home/ubuntu/.aws/aws_secret_access_key"
        content: |
          {{ aws_secret_access_key }}

    - name: Execute the Uptime command over Command module
      register: uptimeoutput
      command: "uptime"

    - debug:
        var: uptimeoutput.stdout_lines
  
    - name: Install AWS CLI client
      block:
        - name: Download AWS CLI
          shell: "curl -o awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        
        - name: Install unzip
          apt:
            name: unzip
            state: present
        
        - name: Extract AWS CLI
          shell: "unzip awscliv2.zip > /dev/null"
        
        - name: Run AWS CLI installer
          shell: "sudo ./aws/install"
      tags: 
        - aws_cli
  
    - name: Tag subnets
      block:
        - name: Tag subnets
          shell: "for SUBNET in {{ aws_subnets }}; do aws ec2 create-tags --resources $SUBNET --tags Key=kubernetes.io/cluster/{{ cluster_name }},Value=shared --region {{ aws_region }}; done"
      tags:
        - tag_subnets

    - name: Install Containerd
      block:
        - name: Disable swap
          command: "swapoff -a"
        
        - name: Configure kernel modules and sysctl
          command: "modprobe overlay && modprobe br_netfilter"
        
        - name: Configure sysctl
          copy:
            dest: "/etc/sysctl.d/kubernetes.conf"
            content: |
              net.bridge.bridge-nf-call-ip6tables = 1
              net.bridge.bridge-nf-call-iptables = 1
              net.ipv4.ip_forward = 1
        
        - name: Configure modules load
          copy:
            dest: "/etc/modules-load.d/k8s.conf"
            content: |
              overlay
              br_netfilter
        
        - name: Apply sysctl settings
          command: "sysctl --system"

    # Update apt cache
    - name: Update apt cache
      apt:
        update_cache: yes

    # Install required packages
    - name: Install required packages for Docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present

    # Create Docker keyring directory
    - name: Create Docker keyring directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    # Add Docker GPG key
    - name: Download Docker GPG key using curl
      command: curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.asc

     # Get system architecture
    - name: Get system architecture
      command: dpkg --print-architecture
      register: architecture

    # Get OS codename
    - name: Get OS codename
      command: bash -c 'source /etc/os-release && echo $VERSION_CODENAME'
      register: codename

    # Add Docker repository to apt sources list
    - name: Add Docker repository to APT sources
      copy:
        content: "deb [arch={{ architecture.stdout }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ codename.stdout }} stable"
        dest: /etc/apt/sources.list.d/docker.list
        mode: '0644'

    # Update apt cache again
    - name: Update apt cache after adding Docker repo
      apt:
        update_cache: yes

    # Install containerd
    - name: Install containerd
      apt:
        name: containerd.io
        state: present

    # Create containerd config directory
    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory

    # Configure containerd
    - name: Generate containerd config
      shell: |
        containerd config default | tee /etc/containerd/config.toml

    # Restart and enable containerd service
    - name: Restart and enable containerd
      systemd:
        name: containerd
        enabled: yes
        state: restarted

    # Enable IP forwarding
    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    ########################################
    # Install Kubernetes components
    ########################################

    - name: Get Kubernetes package key
      shell: curl -fsSL {{ k8s_url_apt_key }} | gpg --dearmor -o {{ k8s_gpgpath }}
      args:
        creates: "{{ k8s_gpgpath }}"

    - name: Add Kubernetes repository
      apt_repository:
        filename: kubernetes
        repo: "deb [signed-by={{ k8s_gpgpath }}] {{ k8s_repository }} /"

    # Update apt cache after adding Kubernetes repo
    - name: Update apt cache after adding Kubernetes repo
      apt:
        update_cache: yes

    # Install Kubernetes components
    - name: Install kubelet and kubeadm
      shell: sudo apt-get install -y kubelet kubeadm kubectl

    # Enable bash completion for kubeadm
    - name: Enable bash completion for kubeadm
      shell: |
        kubeadm completion bash > /etc/bash_completion.d/kubeadm
      args:
        creates: /etc/bash_completion.d/kubeadm

    # Enable and start kubelet service
    - name: Enable and start kubelet
      systemd:
        name: kubelet
        enabled: yes
        state: started

    ########################################
    # Initialize Kubernetes Cluster
    ########################################

    - name: Remove containerd config for Kubernetes
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: Restart containerd after config reset
      systemd:
        name: containerd
        state: restarted

    - name: Reset kubeadm cluster
      command: kubeadm reset --force

    - name: Initialize Kubernetes cluster
      command: kubeadm init

    # Setup kubeconfig for ubuntu user
    - name: Create .kube directory
      file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0700'

    - name: Copy kubeconfig to user directory
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: '0600'

    - debug: msg="End configuration for master node"
    
    ########################################
    # Calico
    ########################################
    # Momentary problem on connection via Calico 

    - name: Check Kubernetes API connectivity
      command: kubectl get nodes --kubeconfig=/home/ubuntu/.kube/config
      register: kubectl_test
      retries: 5
      delay: 5
      until: kubectl_test.rc == 0

    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted
        enabled: yes

    - name: Sleep for Calico
      shell: sleep 20

    - name: Check 2 Kubernetes API connectivity
      command: kubectl get nodes --kubeconfig=/home/ubuntu/.kube/config
      register: kubectl_test
      retries: 5
      delay: 5
      until: kubectl_test.rc == 0

    - name: Install Calico dependencies
      command: kubectl create -f /home/ubuntu/networking/tigera-operator.yaml --validate=false

    - name: Apply custom Calico resources
      command: kubectl create -f /home/ubuntu/networking/custom-resources.yaml  --validate=false

    - name: Create a key for the CNI plugin
      command: >
        openssl req -newkey rsa:4096
        -keyout /home/ubuntu/cni.key
        -nodes
        -out /home/ubuntu/cni.csr
        -subj /CN=calico-cni
      args:
        chdir: /home/ubuntu

    - name: Sign with certificate using the main Kubernetes CA
      command: >
        openssl x509 -req -in /home/ubuntu/cni.csr
        -CA /etc/kubernetes/pki/ca.crt
        -CAkey /etc/kubernetes/pki/ca.key
        -CAcreateserial
        -out /home/ubuntu/cni.crt
        -days 365
      args:
        creates: /home/ubuntu/cni.crt

    - name: Set the correct permissions for cni.crt
      command: >
        chown 1000:1000 /home/ubuntu/cni.crt

    - name: Create a kubeconfig file for the CNI plugin to use to access Kubernetes
      command: kubectl config view -o jsonpath='{.clusters[0].cluster.server}'
      register: apiserver

    - name: Config kubeconfig cluster
      command: >
        kubectl config set-cluster kubernetes
        --certificate-authority=/etc/kubernetes/pki/ca.crt
        --embed-certs=true
        --server={{ apiserver.stdout }}
        --kubeconfig=/home/ubuntu/cni.kubeconfig
      args:
        chdir: /home/ubuntu

    - name: Config kubeconfig credential
      command: >
        kubectl config set-credentials calico-cni
        --client-certificate=/home/ubuntu/cni.crt
        --client-key=/home/ubuntu/cni.key
        --embed-certs=true
        --kubeconfig=/home/ubuntu/cni.kubeconfig
      args:
        chdir: /home/ubuntu

    - name: Config kubeconfig default context
      command: >
        kubectl config set-context default
        --cluster=kubernetes
        --user=calico-cni
        --kubeconfig=/home/ubuntu/cni.kubeconfig
      args:
        chdir: /home/ubuntu

    - name: Use previous context for kubectl
      command: kubectl config use-context default --kubeconfig=/home/ubuntu/cni.kubeconfig

    - name: Define a cluster role the CNI plugin will use to access Kubernetes.
      shell: "kubectl apply -f /home/ubuntu/networking/cluster-role.yaml"

    - name: Define cluster-role-binding
      shell: "kubectl create clusterrolebinding calico-cni --clusterrole=calico-cni --user=calico-cni"
